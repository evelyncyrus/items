/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$url: 'http://m.ppdaicdn.com/msite/img/landing/sprite.png';

$card-name: 'card';
$card-x: 209px;
$card-y: 0px;
$card-offset-x: -209px;
$card-offset-y: 0px;
$card-width: 163px;
$card-height: 137px;
$card-total-width: 482px;
$card-total-height: 330px;
$card-image: $url;
$card: (209px, 0px, -209px, 0px, 163px, 137px, 482px, 330px, $url, 'card', );

$cash-name: 'cash';
$cash-x: 209px;
$cash-y: 137px;
$cash-offset-x: -209px;
$cash-offset-y: -137px;
$cash-width: 110px;
$cash-height: 111px;
$cash-total-width: 482px;
$cash-total-height: 330px;
$cash-image: $url;
$cash: (209px, 137px, -209px, -137px, 110px, 111px, 482px, 330px, $url, 'cash', );

$clock-name: 'clock';
$clock-x: 0px;
$clock-y: 164px;
$clock-offset-x: 0px;
$clock-offset-y: -164px;
$clock-width: 166px;
$clock-height: 166px;
$clock-total-width: 482px;
$clock-total-height: 330px;
$clock-image: $url;
$clock: (0px, 164px, 0px, -164px, 166px, 166px, 482px, 330px, $url, 'clock', );

$light-name: 'light';
$light-x: 372px;
$light-y: 0px;
$light-offset-x: -372px;
$light-offset-y: 0px;
$light-width: 110px;
$light-height: 111px;
$light-total-width: 482px;
$light-total-height: 330px;
$light-image: $url;
$light: (372px, 0px, -372px, 0px, 110px, 111px, 482px, 330px, $url, 'light', );

$milkshake-name: 'milkshake';
$milkshake-x: 0px;
$milkshake-y: 0px;
$milkshake-offset-x: 0px;
$milkshake-offset-y: 0px;
$milkshake-width: 209px;
$milkshake-height: 164px;
$milkshake-total-width: 482px;
$milkshake-total-height: 330px;
$milkshake-image: $url;
$milkshake: (0px, 0px, 0px, 0px, 209px, 164px, 482px, 330px, $url, 'milkshake', );

$time-name: 'time';
$time-x: 372px;
$time-y: 111px;
$time-offset-x: -372px;
$time-offset-y: -111px;
$time-width: 110px;
$time-height: 111px;
$time-total-width: 482px;
$time-total-height: 330px;
$time-image: $url;
$time: (372px, 111px, -372px, -111px, 110px, 111px, 482px, 330px, $url, 'time', );
$spritesheet-width: 482px;
$spritesheet-height: 330px;
$spritesheet-image: $url;
$spritesheet-sprites: ($card, $cash, $clock, $light, $milkshake, $time, );
$spritesheet: (482px, 330px, $url, $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
